@inject Append.Blazor.Notifications.INotificationService NotificationService
@inject IHttpClientFactory clientFactory
@inherits LayoutComponentBase
<Layout>
    <LayoutHeader>
        <NavMenu />
    </LayoutHeader>
    <LayoutContent>
        <main>
            <article class="content px-4">
                @Body
            </article>
        </main>
    </LayoutContent>
</Layout>

@code{
    private HttpClient httpClient;
    DateTime now;
    bool IsSupportedByBrowser;
    bool UserWantNotifications;
    bool TodayDayIsFree;

    // https://timmoth.com/posts/ZF2d7lLLn0aU8eWX31Sbnw - MIT

    ///////////////////////////////////////////////////////////////////////////////////////////////

    protected override async Task OnInitializedAsync()
    {
        httpClient = clientFactory.CreateClient("API");

        UserWantNotifications = await httpClient.GetFromJsonAsync<bool>("/api/notification/user");

        var response = await httpClient.GetFromJsonAsync<DayFreeResponse>("/api/notification/free");

        TodayDayIsFree = response.DayFreeType == DayFreeType.DaySet && response.IsFree;

        IsSupportedByBrowser = await NotificationService.IsSupportedByBrowserAsync();

        if (IsSupportedByBrowser)
        {
            PermissionType permission = await NotificationService.RequestPermissionAsync();
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if(IsSupportedByBrowser && UserWantNotifications)
            {
                CancellationTokenSource _timerCancellationToken = new();
                // using var timer = new PeriodicTimer(TimeSpan.FromSeconds(10));
                using var timer = new PeriodicTimer(TimeSpan.FromHours(1));
                while (!_timerCancellationToken.IsCancellationRequested && await timer.WaitForNextTickAsync())
                {

                    var response = await httpClient.GetFromJsonAsync<DayFreeResponse>("/api/notification/free");

                    TodayDayIsFree = response.DayFreeType == DayFreeType.DaySet && response.IsFree;
                    now = DateTime.Now;
                    if(now.Hour == 18 && !TodayDayIsFree)
                    {
                        await NotificationService.CreateAsync("Notification", await httpClient.GetStringAsync("/api/notification"));
                    }
                }
            }
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
}