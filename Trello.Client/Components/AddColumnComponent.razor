@inject IToastService ToastService
@inject IHttpClientFactory clientFactory
<ModalBody>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.IsFull.Is3.OnDesktop">
            Name
        </FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
            <TextEdit @bind-Text="Request.Name" />
        </FieldBody>
    </Field>
    <Check TValue="bool" @bind-Checked="Request.MarkAsDone">Tasks in this column will be marked as done for statictics</Check>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Success" Clicked="Confirm">Confirm</Button>
    <Button Color="Color.Secondary" Clicked="ModalService.Hide">Cancel</Button>
</ModalFooter>
@code {
    [Inject] public IModalService ModalService { get; set; }
    [Parameter] public int TemplateID { get; set; }
    [Parameter] public Func<AddColumnResponse?, Task> OnConfirm { get; set; }
    public AddColumnRequest Request { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Request.TemplateID = TemplateID;
    }

    public async Task Confirm()
    {
        if (Request.Name == string.Empty)
        {
            await ToastService.Error("Name of column is required.");
            return;
        }

        var httpClient = clientFactory.CreateClient("API");
        var response = await httpClient.PostAsJsonAsync<AddColumnRequest>("/api/template/column", Request);

        if(response == null)
        {
            await OnConfirm(null);
        }
        else
        {
            var content = await response.Content.ReadFromJsonAsync<AddColumnResponse>();
            await OnConfirm(content);
        }

    }
}
