@inject IToastService ToastService
<ModalHeader>
    <ModalTitle>
        Edit: @TemplateName
    </ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is4.OnDesktop">
            Template Name
        </FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is8.OnDesktop">
            <TextEdit @bind-Text="Request.Name" />
        </FieldBody>
    </Field>
    <Heading Size="HeadingSize.Is3">Columns:</Heading>
    <DropContainer TItem="Temp" Items="@List" Flex="Flex.Wrap.Grow.Is1.AlignItems.Center" @ref="DropContainer">
        <ChildContent>
            @foreach (var c in Columns)
            {
                <Div Style="flex-grow:1" Flex="Flex.Column.AlignItems.Center">
                    <Div Width="Width.Is100">
                        <DropZone TItem="Temp" Name="@c.Name" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1" Shadow="Shadow.Large">
                            <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">@c.Name - @c.ID</Heading>
                            @if (c.ShowEdit)
                            {
                                <Div Flex="Flex.Row.JustifyContent.Between" Margin="Margin.Is3.FromBottom">
                                    <Div Width="Width.Is75">
                                        <TextEdit @bind-Text="EditColumnName" />
                                    </Div>
                                    <Div Margin="Margin.IsAuto.FromEnd.Is2.FromStart">
                                        <Button Color="Color.Primary" Clicked="()=>EditColumn(c.ID)">Edit Name</Button>
                                    </Div>
                                </Div>
                            }
                            <Button Color="Color.Secondary" Clicked="()=>ShowEditField(c.ID)">Edit</Button>
                            <Button Color="Color.Danger" Clicked="()=>DeleteColumn(c.ID)">Delete</Button>
                        </DropZone>
                    </Div>
                </Div>
            }
        </ChildContent>
    </DropContainer>
    <Div Flex="Flex.Row.AlignItems.Baseline">
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is5.OnDesktop">
                Column Name
            </FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is7.OnDesktop">
                <TextEdit @bind-Text="ColumnName" />
            </FieldBody>
        </Field>
        <Button Color="Color.Success" Margin="Margin.Is5.FromStart" Clicked="AddColumn">Add</Button>
    </Div>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Success" Clicked="Confirm">Confirm</Button>
    <Button Color="Color.Secondary" Clicked="ModalService.Hide">Cancel</Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; }
    [Parameter] public Func<DefaultResponse?, Task> OnConfirm { get; set; }
    [Parameter] public string TemplateName { get; set; }
    [Parameter] public List<EditColumnModel> Columns { get; set; }
    private DropContainer<Temp> DropContainer = new();
    private List<Temp> List = [];
    public ChangeTemplateRequest Request { get; set; } = new();
    public string ColumnName { get; set; } = string.Empty;
    public string EditColumnName { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Request.Name = TemplateName;
    }

    private int MaxID()
    {
        List<int> ids = [
            Request.DeletedColumnIDs.Count == 0 ? 0 : Request.DeletedColumnIDs.Max(),
            Request.AddedColumns.Count == 0 ? 0 : Request.AddedColumns.Select(c => c.ID).Max(),
            Request.ChangedColumns.Count == 0 ? 0 : Request.ChangedColumns.Select(c => c.ID).Max(),
            Columns.Count == 0 ? 0 : Columns.Select(c => c.ID).Max()
        ];
        return ids.Max();
    } 

    public async Task AddColumn()
    {
        if (ColumnName == string.Empty)
        {
            await ToastService.Error("Column name cannot be empty");
            return;
        }

        int max = MaxID() + 1;

        Request.AddedColumns.Add(new AddTemplateColumn(max, ColumnName));
        Columns.Add(new EditColumnModel()
            {
                ID = max,
                Name = ColumnName
            });
        DropContainer.Refresh();
        StateHasChanged();
    }

    public void ShowEditField(int ID)
    {
        Columns.Where(c => c.ID == ID).First().ShowEdit = true;
        DropContainer.Refresh();
        StateHasChanged();
    }

    public async Task EditColumn(int ID)
    {
        if(EditColumnName == string.Empty)
        {
            await ToastService.Error("Column name cannot be empty");
            return;
        }
        var column = Columns.Where(c => c.ID == ID).First();
        column.Name = EditColumnName;
        Request.ChangedColumns.Add(new ChangedColumn(ID, EditColumnName));
        column.ShowEdit = false;
        EditColumnName = string.Empty;
        DropContainer.Refresh();
        StateHasChanged();
    }

    public void DeleteColumn(int ID)
    {
        Columns.RemoveAll(c => c.ID == ID);
        Request.DeletedColumnIDs.Add(ID);

        DropContainer.Refresh();
        StateHasChanged();
        DropContainer.Refresh();
        StateHasChanged();
    }

    private void Print()
    {
        Console.WriteLine($"Template Name: {Request.Name}");
        Console.WriteLine("    ADDED:");
        Request.AddedColumns.ForEach(c => Console.WriteLine($"        ID: {c.ID} => Name: {c.Name}"));
        Console.WriteLine("    EDITED:");
        Request.ChangedColumns.ForEach(c => Console.WriteLine($"        ID: {c.ID} => Name: {c.Name}"));
        Console.WriteLine("    DELETED:");
        Request.DeletedColumnIDs.ForEach(c => Console.WriteLine($"        ID: {c}"));
    }

    private async Task Confirm()
    {
        Print();

        if(Request.Name == TemplateName)
        {
            Request.Name = string.Empty;
        }

        // Batching Added and Changed columns

        List<int> batchAE = [];

        foreach(var c in Request.AddedColumns)
        {
            var col = Request.ChangedColumns.Where(cc => cc.ID == c.ID).FirstOrDefault();
            if(col != null)
            {
                batchAE.Add(c.ID);
            }
        }

        batchAE.ForEach(c =>
        {
            // remove from added
            Request.AddedColumns.RemoveAll(cc => cc.ID == c);
            // get from changed
            var col = Request.ChangedColumns.Where(cc => cc.ID == c).First();
            // remove from changed
            Request.ChangedColumns.RemoveAll(cc => cc.ID == c);
            // assing to added
            Request.AddedColumns.Add(new AddTemplateColumn(col.ID, col.Name));
        });

        // Batching Added and Deleted, if a column was added and after deleted, the entry was deleted from two places

        List<int> batchAD = [];

        foreach(var c in Request.DeletedColumnIDs)
        {
            var col = Request.AddedColumns.Where(cc => cc.ID == c).FirstOrDefault();
            if(col != null)
            {
                batchAD.Add(c);
            }
        }

        batchAD.ForEach(c =>
        {
            Request.DeletedColumnIDs.Remove(c);
            Request.AddedColumns.RemoveAll(cc => cc.ID == c);
        });

        // Batching Edited and Deleted, if a column was changed and after deleted, the entry was deleted from two places

        List<int> batchCD = [];

        foreach (var c in Request.DeletedColumnIDs)
        {
            var col = Request.ChangedColumns.Where(cc => cc.ID == c).FirstOrDefault();
            if (col != null)
            {
                batchCD.Add(c);
            }
        }

        batchCD.ForEach(c =>
        {
            // Request.DeletedColumnIDs.Remove(c);
            Request.ChangedColumns.RemoveAll(cc => cc.ID == c);
        });

        Print();

    }

    private class Temp { }
}
