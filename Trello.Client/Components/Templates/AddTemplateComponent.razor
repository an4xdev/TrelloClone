@inject IToastService ToastService
@inject IHttpClientFactory clientFactory
<ModalHeader>
    <ModalTitle>
        Add new template
    </ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is4.OnDesktop">
            Template Name
        </FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is8.OnDesktop">
            <TextEdit @bind-Text="Request.Name"/>
        </FieldBody>
    </Field>
    <Heading Size="HeadingSize.Is3">Columns:</Heading>
    <DropContainer TItem="Temp" Items="@List" Flex="Flex.Wrap.Grow.Is1.AlignItems.Center" @ref="DropContainer">
        <ChildContent>
            @foreach(var c in Request.Columns)
            {
                <Div Style="flex-grow:1" Flex="Flex.Column.AlignItems.Center">
                    <Div Width="Width.Is100">
                        <DropZone TItem="Temp" Name="@c.Name" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1" Shadow="Shadow.Large">
                            <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">@c.Name</Heading>
                            @if(VisibleEdit[c.ID - 1])
                            {
                                <Div Flex="Flex.Row.JustifyContent.Between" Margin="Margin.Is3.FromBottom">
                                    <Div Width="Width.Is75">
                                        <TextEdit @bind-Text="EditColumnName"/>
                                    </Div>
                                    <Div Margin="Margin.IsAuto.FromEnd.Is2.FromStart">
                                        <Button Color="Color.Primary" Clicked="()=>EditColumn(c.ID)">Edit Name</Button>
                                    </Div>
                                </Div>
                            }
                            @if(!FirstAdd)
                            {
                                <Button Color="Color.Secondary" Clicked="()=>ShowEditField(c.ID)">Edit</Button>
                                <Button Color="Color.Danger" Clicked="()=>DeleteColumn(c.ID)">Delete</Button>
                            }
                        </DropZone>
                    </Div>
                </Div>
            }
        </ChildContent>
    </DropContainer>
    <Div Flex="Flex.Row.AlignItems.Baseline">
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is5.OnDesktop">
            Column Name
        </FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is7.OnDesktop">
            <TextEdit @bind-Text="ColumnName" />
        </FieldBody>
    </Field>
        <Button Color="Color.Success" Margin="Margin.Is5.FromStart" Clicked="AddColumn">Add</Button>
    </Div>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Success" Clicked="Confirm">Confirm</Button>
    <Button Color="Color.Secondary" Clicked="ModalService.Hide">Cancel</Button>
</ModalFooter>
@code {
    [Inject] public IModalService ModalService { get; set; }
    [Parameter] public Func<AddTemplateResponse?, Task> OnConfirm { get; set; }
    private DropContainer<Temp> DropContainer = new();
    public AddTemplateRequest Request { get; set; } = new();
    private List<Temp> List = [];
    List<bool> VisibleEdit = [];
    public string ColumnName { get; set; } = string.Empty;
    public bool FirstAdd = true;
    public string EditColumnName { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Request.Columns.Add(new AddTemplateColumn(1, "Placehoder"));
        VisibleEdit.Add(false);
    }

    public async Task AddColumn()
    {
        if (ColumnName == string.Empty)
        {
            await ToastService.Error("Column name cannot be empty");
            return;
        }
        if(FirstAdd)
        {
            FirstAdd = false;
            Request.Columns.Clear();
            VisibleEdit.Clear();
            DropContainer.Refresh();
            StateHasChanged();
        }
        int max = Request.Columns.Count == 0 ? 1 : Request.Columns.Select(c => c.ID).Max() + 1;
        Request.Columns.Add(new AddTemplateColumn(max, ColumnName));
        VisibleEdit.Add(false);
        DropContainer.Refresh();
        StateHasChanged();
        Console.WriteLine($"Added {ColumnName} on ID: {max}");
        Request.Columns.ForEach(c=>Console.Write($"{c.ID} -> {c.Name}, "));
        Console.WriteLine();
    }

    public void ShowEditField(int ID)
    {
        VisibleEdit[ID - 1] = true;
        DropContainer.Refresh();
        StateHasChanged();
    }

    public async Task EditColumn(int ID)
    {
        if(EditColumnName == string.Empty)
        {
            await ToastService.Error("Column name cannot be empty");
            return;
        }
        var column = Request.Columns.Where(c => c.ID == ID).First();
        column = new AddTemplateColumn(column.ID, EditColumnName);
        EditColumnName = string.Empty;
        VisibleEdit[ID - 1] = false;
        DropContainer.Refresh();
        StateHasChanged();
    }

    public void DeleteColumn(int ID)
    {
        Console.WriteLine($"Deleting at ID: {ID}, deleted count: {Request.Columns.RemoveAll(c => c.ID == ID)}");
        Request.Columns.ForEach(c => Console.Write($"{c.ID} -> {c.Name}, "));
        Console.WriteLine();
        DropContainer.Refresh();
        StateHasChanged();
        DropContainer.Refresh();
        StateHasChanged();
    }

    public async Task Confirm()
    {
        if(Request.Name == string.Empty)
        {
            await ToastService.Error("Name of template is required.");
            return;
        }
        if(FirstAdd)
        {
            await ToastService.Error("Provide at least one column.");
            return;
        }
        var httpClient = clientFactory.CreateClient("API");
        var response = await httpClient.PostAsJsonAsync<AddTemplateRequest>("/api/template/add", Request);
        if(response == null)
        {
            await OnConfirm(null);
            return;
        }
        var content = await response.Content.ReadFromJsonAsync<AddTemplateResponse>();
        await OnConfirm(content);

        await ModalService.Hide();
    }

    private class Temp {}
}

