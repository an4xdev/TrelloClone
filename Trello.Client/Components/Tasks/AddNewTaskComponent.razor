@inject IHttpClientFactory clientFactory
<ModalBody>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.IsFull.Is3.OnDesktop">
            Name
        </FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
            <TextEdit @bind-Text="Name" />
        </FieldBody>
    </Field>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.IsFull.Is3.OnDesktop">
            Description
        </FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
            <TextEdit @bind-Text="Description" />
        </FieldBody>
    </Field>
    <Button Color="Color.Secondary" Clicked="ShowTags">Add Tags</Button>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Success" Clicked="Confirm">Confirm</Button>
    <Button Color="Color.Secondary" Clicked="Close">Cancel</Button>
</ModalFooter>
@code {
    [Inject] public IModalService ModalService { get; set; }
    [Parameter] public Func<AddItemResponse?, DropItem?, Task> OnConfirm { get; set; }
    [Parameter] public int ProjectID { get; set; }
    [Parameter] public int ColumnID { get; set; }
    [Parameter] public string ColumnName { get; set; }
    [Parameter] public List<TagDTO> Tags { get; set; }
    public string Name { get; set; }
    public string Description { get; set; }
    public List<bool> Checked = [];
    ModalInstance ChooseTag;

    private async Task Confirm()
    {
        List<int> TagsIDs = new List<int>(Checked.Where(c => c).Count());

        for(int i = 0; i < Checked.Count(); i++)
        {
            if(Checked[i])
            {
                TagsIDs.Add(i + 1);
            }
        }

        AddItemRequest request = new()
        {
            Name = Name,
            ColumnID = ColumnID,
            Description = Description,
            ProjectID = ProjectID,
            TagIDs = TagsIDs
        };
        var httpClient = clientFactory.CreateClient("API");
        var response = await httpClient.PostAsJsonAsync<AddItemRequest>("/api/item", request);

        if (response == null)
        {
            await OnConfirm(null, null);
        }
        else
        {
            var content = await response.Content.ReadFromJsonAsync<AddItemResponse>();
            DropItem added = new(content.AddedID, Name, ColumnName, Description, null, []);
            await OnConfirm(content, added);
        }

        await Close();
    }

    private async Task Close()
    {
        if(ChooseTag != null)
        {
            await ModalService.Remove(ChooseTag);
        }

        await ModalService.Hide();
    }

    private async Task ShowTags()
    {
        if(Checked.Count == 0)
        {
            Tags.ForEach(_ => Checked.Add(false));
        }

        if(ChooseTag == null)
        {
            ChooseTag = await ModalService.Show<ChooseTagComponent>(x =>
            {
                x.Add(x => x.Tags, Tags);
                x.Add(x => x.CheckBoxChecked, CheckBoxChanged);
                x.Add(x => x.Checked, Checked);
            }, new ModalInstanceOptions()
                {
                    Stateful = true,
                    UseModalStructure = false,
                    ElementId = "TagsAddNewTask",
                    RenderMode = ModalRenderMode.LazyLoad,
                    Scrollable = true,
                });
        }

        await ModalService.Show(ChooseTag);
    }

    public void CheckBoxChanged(int ID, bool value)
    {
        Checked[ID - 1] = value;
        Console.WriteLine($"CheckBox for: {ID}, now is: {Checked[ID - 1]}");
    }

}
