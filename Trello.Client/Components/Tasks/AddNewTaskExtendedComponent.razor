@inject IHttpClientFactory clientFactory
<ModalBody>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.IsFull.Is3.OnDesktop">
            Name
        </FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
            <TextEdit @bind-Text="Name" />
        </FieldBody>
    </Field>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.IsFull.Is3.OnDesktop">
            Description
        </FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
            <TextEdit @bind-Text="Description" />
        </FieldBody>
    </Field>
    <Field Horizontal>
        <FieldLabel ColumnSize="ColumnSize.IsFull.Is3.OnDesktop">
            Category
        </FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
            <Select @bind-SelectedValue="@Value">
                @foreach (var c in Columns)
                {
                    <SelectItem Value="@c.ID">@c.Name</SelectItem>
                }
            </Select>
        </FieldBody>
    </Field>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Success" Clicked="Confirm">Confirm</Button>
    <Button Color="Color.Secondary" Clicked="ModalService.Hide">Cancel</Button>
</ModalFooter>
@code {
    [Inject] public IModalService ModalService { get; set; }
    [Parameter] public HashSet<ColumnModel> Columns { get; set; }
    [Parameter] public int ProjectID { get; set; }
    [Parameter] public Func<AddItemResponse?, DropItem?, Task> OnConfirm { get; set; }
    public string Name { get; set; }
    public int Value { get; set; }
    public string Description { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Value = Columns.First().ID;
    }

    private async Task Confirm()
    {
        AddItemRequest request = new()
            {
                Name = Name,
                ColumnID = Value,
                Description = Description,
                ProjectID = ProjectID
            };
        var httpClient = clientFactory.CreateClient("API");
        var response = await httpClient.PostAsJsonAsync<AddItemRequest>("/api/item/add", request);

        if (response == null)
        {
            await OnConfirm(null, null);
        }
        else
        {
            var content = await response.Content.ReadFromJsonAsync<AddItemResponse>();
            DropItem added = new(content.AddedID, Name, Columns.Where(c=>c.ID == Value).First().Name, Description, null);
            await OnConfirm(content, added);
        }

        await ModalService.Hide();
    }
}
