@using System.IO
@using Trello.Shared
@inject IHttpClientFactory clientFactory;
<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Employee edit</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>username</FieldLabel>
                <TextEdit Placeholder="Enter username..." @bind-Text="@model.UserName"/>
            </Field>
            <Field>
                <FieldLabel>profile picture</FieldLabel>
                <FileEdit Changed="@OnChanged" Ended="OnEnded" Filter="image/*" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@SendData">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Snackbar @ref="fileSnackbar" Color="SnackbarColor.Danger" Location="SnackbarLocation.TopEnd">
    <SnackbarHeader>
        Enter file
    </SnackbarHeader>
    <SnackbarBody>
        You needs to provide profile picture
    </SnackbarBody>
</Snackbar>

<Snackbar @ref="userSnackbar" Color="SnackbarColor.Danger" Location="SnackbarLocation.TopEnd">
    <SnackbarHeader>
        Enter user name
    </SnackbarHeader>
    <SnackbarBody>
        You needs to provide user name
    </SnackbarBody>
</Snackbar>

<Snackbar @ref="errorSnackbar" Color="SnackbarColor.Danger" Location="SnackbarLocation.TopEnd">
    <SnackbarHeader>
        Error
    </SnackbarHeader>
    <SnackbarBody>
        Some error
    </SnackbarBody>
</Snackbar>

<Snackbar @ref="successSnackbar" Color="SnackbarColor.Success" Location="SnackbarLocation.TopEnd">
    <SnackbarHeader>
        Success
    </SnackbarHeader>
    <SnackbarBody>
        Successfully added user
    </SnackbarBody>
</Snackbar>

@code {
    private Snackbar fileSnackbar;
    private Snackbar userSnackbar;
    private Snackbar errorSnackbar;
    private Snackbar successSnackbar;

    private AddUser model = new();

    private Modal modalRef;

    bool pictureLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        var httpClient = clientFactory.CreateClient("API");
        bool response = await httpClient.GetFromJsonAsync<bool>("/api/users");

        if (!response)
        {
            await modalRef.Show();
        }
    }

    private async Task SendData()
    {
        if(!pictureLoaded)
        {
            await fileSnackbar.Show();
            return;
        }
        if(model.UserName.Equals(string.Empty))
        {
            await userSnackbar.Show();
            return;
        }
        var httpClient = clientFactory.CreateClient("API");

        var response = await httpClient.PostAsJsonAsync<AddUser>("/api/users", model);

        bool success = await response.Content.ReadFromJsonAsync<bool>();

        if(success)
        {
            await modalRef.Hide();
            await successSnackbar.Show();
        }
        else
        {
            await errorSnackbar.Show();
        }

    }

    async Task OnChanged(FileChangedEventArgs e)
    {
        try
        {
            var file = e.Files.FirstOrDefault();
            if (file == null)
            {
                return;
            }

            using (MemoryStream result = new MemoryStream((int)file.Size))
            {
                await file.OpenReadStream(file.Size).CopyToAsync(result);
                var image = result.ToArray();
                model.ProfilePictureData = Convert.ToBase64String(image);
            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            // this.StateHasChanged();
        }
    }

    void OnEnded(FileEndedEventArgs e)
    {
        pictureLoaded = true;
        model.ProfilePictureExtension = e.File.Name.Split(".")[1];
    }

}
