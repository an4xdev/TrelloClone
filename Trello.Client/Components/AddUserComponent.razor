@using System.IO
@inject IHttpClientFactory clientFactory
@inject CurrentUser currentUser

@inject EventAggregator EventAggregator

<Modal @ref="modalRef" Closing="OnModalClosing">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Create profile</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Username</FieldLabel>
                <TextEdit Placeholder="Enter username..." @bind-Text="@model.UserName"/>
            </Field>
            <Field>
                <FieldLabel>Profile picture</FieldLabel>
                <FilePicker Upload="OnFileUpload" Filter="image/*" DisableProgressReport="true"/>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@SendData">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    private UserData model = new();

    private Modal modalRef;

    bool pictureLoaded = false;

    bool addedToDB = false;

    [Inject] IToastService toastService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var httpClient = clientFactory.CreateClient("API");
        bool response = await httpClient.GetFromJsonAsync<bool>("/api/users");

        if (!response)
        {
            await modalRef.Show();
        }
    }

    private async Task SendData()
    {
        if(!pictureLoaded)
        {
            await toastService.Error("You needs to provide profile picture", "Enter file");
            return;
        }
        if(model.UserName.Equals(string.Empty))
        {
            await toastService.Error("You needs to provide user name", "Enter user name");
            return;
        }
        var httpClient = clientFactory.CreateClient("API");

        var response = await httpClient.PostAsJsonAsync<UserData>("/api/users", model);

        bool success = await response.Content.ReadFromJsonAsync<bool>();

        if(success)
        {
            addedToDB = true;
            await toastService.Success("Successfully added user", "Success");
            await modalRef.Hide();

            currentUser.UserName = model.UserName;

            EventAggregator.Publish("AddedUser");
        }
        else
        {
            await toastService.Error("Some error", "Error");
        }

    }

    async Task OnFileUpload(FileUploadEventArgs e)
    {
        try
        {
            using (MemoryStream result = new MemoryStream())
            {
                await e.File.OpenReadStream(long.MaxValue).CopyToAsync(result);
                var image = result.ToArray();
                model.ProfilePictureData = Convert.ToBase64String(image);
                model.ProfilePictureExtension = e.File.Name.Split(".")[1];
                pictureLoaded = true;
            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    private async Task OnModalClosing(ModalClosingEventArgs e)
    {
        e.Cancel = !addedToDB || e.CloseReason != CloseReason.UserClosing;

        if(e.Cancel)
        {
            await toastService.Error("You needs to register to continue using application", "Complete registration");
        }
    }

}
