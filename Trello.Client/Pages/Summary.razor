@page "/summary"
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util
@inject IHttpClientFactory clientFactory
<AddUserComponent />

<PageTitle>Summary of your projects</PageTitle>

@if (render)
{
    <Chart Config="TagChartConfig"></Chart>
    <Chart Config="DateChartConfig"></Chart>
}


@code {
    private PieConfig TagChartConfig;
    private LineConfig DateChartConfig;
    HttpClient httpClient;

    bool render = false;

    protected override async Task OnInitializedAsync()
    {
        httpClient = clientFactory.CreateClient("API");
        await LoadSummaryByTags();
        await LoadSummaryByDate();
        render = true;
    }

    private async Task LoadSummaryByDate()
    {
        DateChartConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "ChartJs.Blazor Line Chart"
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                {
                    new CategoryAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            LabelString = "Month"
                        }
                    }
                },
                    YAxes = new List<CartesianAxis>
                {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            LabelString = "Value"
                        }
                    }
                }
                }
            }
        };

        var response = await httpClient.GetFromJsonAsync<List<SummaryByDateResponse>>("/api/summary/date");

        Console.WriteLine("DATES:");

        response.ForEach(d => Console.WriteLine($"    Date: {d.Date.ToString()}, Count: {d.Count}"));


        IDataset<int> dataset = new LineDataset<int>(response.Select(d => d.Count))
        {
            Label = "FOOOOO",
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Fill = FillingMode.Origin
        };

        response.ForEach(d => DateChartConfig.Data.Labels.Add(d.Date.ToString()));

        DateChartConfig.Data.Datasets.Add(dataset);

        // SummaryByDayConfig.Data.Labels.Add();
    }

    private async Task LoadSummaryByTags()
    {
        TagChartConfig = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Tasks by tag"
                    }
                }
            };

        var response = await httpClient.GetFromJsonAsync<List<SummaryByTagsResponse>>("/api/summary/tags");

        Console.WriteLine("TAGS:");

        response.ForEach(t => Console.WriteLine($"    Name: {t.Tag}, Color: {t.Color}, Count: {t.Count}"));

        response.ForEach(t => TagChartConfig.Data.Labels.Add(t.Tag));

        response.ForEach(t => Utils.ColorRecordFromHex(t.Color));

        PieDataset<int> dataset = new PieDataset<int>(response.Select(t => t.Count))
            {
                BackgroundColor = new IndexableOption<string>(response.Select(t => ColorUtil.ColorHexString(Utils.ColorRecordFromHex(t.Color).r, Utils.ColorRecordFromHex(t.Color).g, Utils.ColorRecordFromHex(t.Color).b)).ToArray())
            };

        TagChartConfig.Data.Datasets.Add(dataset);

    }
}