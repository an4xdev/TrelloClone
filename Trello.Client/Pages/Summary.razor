@page "/summary"
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util
@inject IHttpClientFactory clientFactory
@inject ILoadingIndicatorService ApplicationLoadingIndicatorService
<AddUserComponent />
<DayFreeComponent />

<PageTitle>Summary of your projects</PageTitle>

@if(summaryGeneral != null)
{
    <Card>
        <CardTitle>
            General informations
        </CardTitle>
        <CardBody>
            <Div>
                <Text><Text TextWeight="TextWeight.SemiBold">Tasks: </Text>@summaryGeneral.TotalTasks</Text>
            </Div>
            <Div>
                <Text><Text TextWeight="TextWeight.SemiBold">Projects: </Text>@summaryGeneral.TotalProjects</Text>
            </Div>
            @if(summaryGeneral.LastDoneTask != null)
            {
                <Card>
                    <CardTitle>
                        Last done task
                    </CardTitle>
                    <CardBody>
                        <Div>
                            <Text><Text TextWeight="TextWeight.SemiBold">Task Name: </Text>@summaryGeneral.LastDoneTask.TaskName</Text>
                        </Div>
                        <Div>
                            <Text><Text TextWeight="TextWeight.SemiBold">Done at: </Text>@($"{summaryGeneral.LastDoneTask.Date.Value.Day:00}.{summaryGeneral.LastDoneTask.Date.Value.Month:00}.{summaryGeneral.LastDoneTask.Date.Value.Year:00}")</Text>
                        </Div>
                        <Div>
                            <Text><Text TextWeight="TextWeight.SemiBold">Project Name: </Text>@summaryGeneral.LastDoneTask.ProjectName</Text>
                        </Div>
                        <Div>
                            <Button Type="ButtonType.Link" To="@($"/drag/{summaryGeneral.LastDoneTask.ProjectID}")" Color="Color.Primary">Go to project</Button>
                        </Div>
                    </CardBody>
                </Card>
            }
        </CardBody>
    </Card>
}
<Tabs SelectedTab="@selectedTab">
    <Items>
        <Tab Name="tags">Summary of tags</Tab>
        <Tab Name="tasks">Summary of done tasks</Tab>
        <Tab Name="templates">Summary of used templates</Tab>
    </Items>
    <Content>
        <TabPanel Name="tags">
            @if (TagChartConfig != null && TagChartConfig.Data.Datasets.Count != 0)
            {
                <Chart Config="TagChartConfig"></Chart>
            }
        </TabPanel>
        <TabPanel Name="tasks">
            @if (DateChartConfig != null && DateChartConfig.Data.Datasets.Count != 0)
            {
                <Chart Config="DateChartConfig"></Chart>
            }
        </TabPanel>
        <TabPanel Name="templates">
            @if (TemplateChartConfig != null && TemplateChartConfig.Data.Datasets.Count != 0)
            {
                <Chart Config="TemplateChartConfig"></Chart>
            }
        </TabPanel>
    </Content>
</Tabs>

@code {
    private PieConfig TagChartConfig;
    private LineConfig DateChartConfig;
    private BarConfig TemplateChartConfig;
    HttpClient httpClient;
    private SummaryGeneralResponse summaryGeneral;
    string selectedTab = "tags";

    protected override async Task OnInitializedAsync()
    {
        await ApplicationLoadingIndicatorService.Show();

        httpClient = clientFactory.CreateClient("API");
        await LoadSummaryGeneral();
        await LoadSummaryByTags();
        await LoadSummaryByDate();
        await LoadSummaryByTemplate();

        await ApplicationLoadingIndicatorService.Hide();
    }

    private async Task LoadSummaryGeneral()
    {
        summaryGeneral = await httpClient.GetFromJsonAsync<SummaryGeneralResponse>("/api/summary");
    }

    private async Task LoadSummaryByDate()
    {
        DateChartConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Task done of each day",
                    FontSize = 25
                },
                Legend = new Legend
                {
                    Display = false
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Day"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                }
            }
        };

        var response = await httpClient.GetFromJsonAsync<List<SummaryByDateResponse>>("/api/summary/date");

        Console.WriteLine("DATES:");

        response.ForEach(d => Console.WriteLine($"    Date: {d.Date.ToString()}, Count: {d.Count}"));


        IDataset<int> dataset = new LineDataset<int>(response.Select(d => d.Count))
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Fill = FillingMode.Start
        };

        response.ForEach(d => DateChartConfig.Data.Labels.Add($"{d.Date.Value.Day:00}.{d.Date.Value.Month:00}.{d.Date.Value.Year}"));

        DateChartConfig.Data.Datasets.Add(dataset);
    }

    private async Task LoadSummaryByTags()
    {
        TagChartConfig = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Tasks by tag",
                        FontSize = 25
                    }
                }
            };

        var response = await httpClient.GetFromJsonAsync<List<SummaryByTagsResponse>>("/api/summary/tags");

        Console.WriteLine("TAGS:");

        response.ForEach(t => Console.WriteLine($"    Name: {t.Tag}, Color: {t.Color}, Count: {t.Count}"));

        response.ForEach(t => TagChartConfig.Data.Labels.Add(t.Tag));

        response.ForEach(t => Utils.ColorRecordFromHex(t.Color));

        PieDataset<int> dataset = new PieDataset<int>(response.Select(t => t.Count))
            {
                BackgroundColor = new IndexableOption<string>(response.Select(t => ColorUtil.ColorHexString(Utils.ColorRecordFromHex(t.Color).r, Utils.ColorRecordFromHex(t.Color).g, Utils.ColorRecordFromHex(t.Color).b)).ToArray())
            };

        TagChartConfig.Data.Datasets.Add(dataset);

    }

    private async Task LoadSummaryByTemplate()
    {
        TemplateChartConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Display = false
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Count of projects by template",
                    FontSize = 25
                }
            }
        };

        var response = await httpClient.GetFromJsonAsync<List<SummaryByTemplateResponse>>("/api/summary/templates");

        Console.WriteLine("Templates:");

        response.ForEach(t => Console.WriteLine($"    Name: {t.TemplateName}, Count: {t.Count}"));

        response.ForEach(t => TemplateChartConfig.Data.Labels.Add(t.TemplateName));

        IDataset<int> dataset = new BarDataset<int>(response.Select(d => d.Count))
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString()
        };

        TemplateChartConfig.Data.Datasets.Add(dataset);
    }
}