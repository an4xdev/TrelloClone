@page "/drag"
@page "/drag/{projectID:int}"
@inject IToastService ToastService
@inject IHttpClientFactory clientFactory
@inject ILoadingIndicatorService ApplicationLoadingIndicatorService
@if (!(Items == null || Items.Count == 0 || ColumnModels == null || ColumnModels.Count == 0))
{
    <Div Flex="Flex.AlignItems.Center.JustifyContent.Between">
        <Div>
            <Heading Size="HeadingSize.Is3" Margin="Margin.Is3.FromBottom.Is3.FromStart">Project: @ProjectName</Heading>
        </Div>
        <Div>
            <Button Color="Color.Success" Margin="Margin.Is3.FromBottom.Is3.FromEnd" Clicked="ShowExtendedAddTask">Add new task</Button>
        </Div>
    </Div>
    <DropContainer TItem="DropItem" Items="@Items" ItemDropped="@ItemDropped" Flex="Flex.Wrap.Grow.Is1.AlignItems.Center" ItemsFilter="@((item, dropZone) => item.Group == dropZone)" @ref="DropContainer">
        <ChildContent>
            @foreach(var c in ColumnModels)
            {
                <Div Style="flex-grow:1" Flex="Flex.Column.AlignItems.Center">
                    <Div Width="Width.Is100">
                        <DropZone TItem="DropItem" Name="@c.Name" AllowReorder Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1" Shadow="Shadow.Large">
                            <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">@c.Name</Heading>
                        </DropZone>
                    </Div>
                    <Div Display="Display.Flex">
                        <Button Color="Color.Success" Clicked="ShowAddTask">Add new task</Button>
                    </Div>
                </Div>
            }
            <Div>
                <Tooltip Text="Add Column">
                    <Button Color="Color.Primary" Clicked="ShowAddColumnModal">Add Column</Button>
                </Tooltip>
            </Div>
        </ChildContent>
        <ItemTemplate>
            <Div Flex="Flex.AlignItems.Center.JustifyContent.Between" Shadow="Shadow.Large" Padding="Padding.Is3">
                <Div Padding="Padding.Is2" Margin="Margin.Is2.FromEnd">
                    <Text>@context.Name</Text>
                </Div>
                <Div>
                    <Button Color="Color.Primary" Clicked="()=>ShowInfoModal(context)"><Icon Name="IconName.InfoCircle" /></Button>
                    <Button Color="Color.Secondary" Clicked="()=>ShowEditModal(context)"><Icon Name="IconName.Edit" /></Button>
                    <Button Color="Color.Danger" Clicked="()=>ShowDeleteModal(context)"><Icon Name="IconName.Delete" /></Button>
                </Div>
                
            </Div>
        </ItemTemplate>
    </DropContainer>
    
}

@code {
    private DropContainer<DropItem> DropContainer = new();
    private List<DropItem> Items;
    private HashSet<ColumnModel> ColumnModels;
    private string ProjectName;

    [Parameter]
    public int? ProjectID { get; set; }

    [Inject] public IModalService ModalService { get; set; }

    private Task ItemDropped(DraggableDroppedEventArgs<DropItem> dropItem)
    {
        dropItem.Item.Group = dropItem.DropZoneName;
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {

        await ApplicationLoadingIndicatorService.Show();

        var httpClient = clientFactory.CreateClient("API");

        var response = await httpClient.GetFromJsonAsync<ProjectDTO>("/api/project/default");

        // Console.WriteLine(response.Name);
        // Console.WriteLine(response.Template.Name);
        // foreach(var item in response.Items)
        // {
        //     Console.WriteLine(item.Name);

        // }

        ColumnModels = [];

        Items = [];
        response.Template.Columns.ForEach(c => c.Items.ForEach(i =>
        {
            Items.Add(new DropItem(c, i));
            ColumnModels.Add(new ColumnModel{ID = c.ID, Name = c.Name});
        }));

        ProjectName = response.Name;

        Items.ForEach(i => Console.WriteLine($"ID: {i.Id}, Name: {i.Name}, Group: {i.Group}"));
        // foreach(var c in columns)
        // {
        //     Console.WriteLine($"C Name: {c.Name}");
        // }

        await ApplicationLoadingIndicatorService.Hide();

    }

    public Task ShowInfoModal(DropItem item)
    {
        return ModalService.Show<ItemDetailsComponent>(x => x.Add(x => x.Item, item), new ModalInstanceOptions(){UseModalStructure=false});
    }

    public Task ShowEditModal(DropItem item)
    {
        return ModalService.Show<EditItemComponent>(x => {
            x.Add(x => x.Item, item);
            x.Add(x => x.OnConfirm, ChangedTask);
        }, new ModalInstanceOptions() { UseModalStructure = false });
    }

    public Task ShowDeleteModal(DropItem item)
    {
        return ModalService.Show<DeleteItemComponent>(x => x.Add(x => x.Item, item), new ModalInstanceOptions() { UseModalStructure = false });
    }

    // TODO: add parameter of function to make changes in UI when api response
    public Task ShowAddColumnModal()
    {
        return ModalService.Show<AddColumnComponent>("Add new column");
    }

    public Task ShowExtendedAddTask()
    {
        return ModalService.Show<AddNewTaskExtendedComponent>("Add new task", x=>x.Add(x=>x.Columns, ColumnModels));
    }

    public Task ShowAddTask()
    {
        return ModalService.Show<AddNewTaskComponent>("Add new task");
    }

    private async Task ChangedTask(DefaultResponse? response, DropItem? changed)
    {
        if(response == null || changed == null)
        {
            await ToastService.Error("Error with processing request.");
        }
        else
        {
            if(response.IsSuccess)
            {
                var item = Items.Where(i => i.Id == changed.Id).First();
                item.Name = changed.Name;
                item.Description = changed.Description;
                await ToastService.Success(response.Message); 
            }
            else
            {
                await ToastService.Error(response.Message);
            }
        }
        DropContainer.Refresh();
        StateHasChanged();
    }
}