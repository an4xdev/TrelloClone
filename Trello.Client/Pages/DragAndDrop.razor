@page "/drag"
@page "/drag/{projectID:int}"
@inject IToastService ToastService
@inject IHttpClientFactory clientFactory
@inject ILoadingIndicatorService ApplicationLoadingIndicatorService
@inject NavigationManager navigationManager
@if (!(Items == null || Items.Count == 0 || ColumnModels == null || ColumnModels.Count == 0))
{
    <Div Flex="Flex.AlignItems.Center.JustifyContent.Between">
        <Div>
            <Heading Size="HeadingSize.Is3" Margin="Margin.Is3.FromBottom.Is3.FromStart">Project: @ProjectName</Heading>
        </Div>
        <Div>
            <Button Color="Color.Success" Margin="Margin.Is3.FromBottom.Is3.FromEnd" Clicked="ShowExtendedAddTask">Add new task</Button>
        </Div>
    </Div>
    <DropContainer TItem="DropItem" Items="@Items" ItemDropped="@ItemDropped" Flex="Flex.Wrap.Grow.Is1.AlignItems.Center" ItemsFilter="@((item, dropZone) => item.Group == dropZone)" @ref="DropContainer">
        <ChildContent>
            @foreach(var c in ColumnModels)
            {
                <Div Style="flex-grow:1" Flex="Flex.Column.AlignItems.Center">
                    <Div Width="Width.Is100">
                        <DropZone TItem="DropItem" Name="@c.Name" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1" Shadow="Shadow.Large">
                            <Div Flex="Flex.JustifyContent.Between">
                                <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">@c.Name</Heading>
                                @if(c.MarkAsDone)
                                {
                                    <Tooltip Text="Tasks in this column are marked as done for statistics">
                                        <Icon Name="IconName.InfoCircle" />
                                    </Tooltip>
                                }
                            </Div>
                        </DropZone>
                    </Div>
                    <Div Display="Display.Flex">
                        <Button Color="Color.Success" Clicked="()=>ShowAddTask(c.ID, c.Name)">Add new task</Button>
                    </Div>
                </Div>
            }
            <Div>
                <Tooltip Text="Add Column">
                    <Button Color="Color.Primary" Clicked="ShowAddColumnModal">Add Column</Button>
                </Tooltip>
            </Div>
        </ChildContent>
        <ItemTemplate>
            <Div Flex="Flex.AlignItems.Center.JustifyContent.Between" Shadow="Shadow.Large" Padding="Padding.Is3">
                <Div Padding="Padding.Is2" Margin="Margin.Is2.FromEnd">
                    <Text>@context.Name</Text>
                </Div>
                <Div>
                    <Button Color="Color.Primary" Clicked="()=>ShowInfoModal(context)"><Icon Name="IconName.InfoCircle" /></Button>
                    <Button Color="Color.Secondary" Clicked="()=>ShowEditModal(context)"><Icon Name="IconName.Edit" /></Button>
                    <Button Color="Color.Danger" Clicked="()=>ShowDeleteModal(context)"><Icon Name="IconName.Delete" /></Button>
                </Div>
            </Div>
        </ItemTemplate>
    </DropContainer>
    
}

@code {
    private DropContainer<DropItem> DropContainer = new();
    private List<DropItem> Items;
    private HashSet<ColumnModel> ColumnModels;
    private string ProjectName;
    private List<TagDTO> Tags;

    [Parameter]
    public int? ProjectID { get; set; }

    public int TemplateID;

    [Inject] public IModalService ModalService { get; set; }

    private async Task ItemDropped(DraggableDroppedEventArgs<DropItem> dropItem)
    {
        var column = ColumnModels.Where(c => c.Name == dropItem.DropZoneName).FirstOrDefault();
        if(column == null)
        {
            await ToastService.Error("Unkown column.");
            return;
        }
        ChangeItemColumnRequest request = new()
            {
                ItemID = dropItem.Item.ID,
                ColumnID = column.ID

            };
        var httpClient = clientFactory.CreateClient("API");
        var response = await httpClient.PutAsJsonAsync<ChangeItemColumnRequest>("/api/item/column", request);

        if(response == null)
        {
            await ToastService.Error("Error with procesing request.");
            dropItem.Item.Group = dropItem.SourceDropZoneName;
            return;
        }

        var content = await response.Content.ReadFromJsonAsync<DefaultResponse>();

        if(content == null)
        {
            await ToastService.Error("Error with procesing request content.");
            dropItem.Item.Group = dropItem.SourceDropZoneName;
            return;
        }

        if(!content.IsSuccess)
        {
            await ToastService.Error(content.Message);
            dropItem.Item.Group = dropItem.SourceDropZoneName;
            return;
        }

        dropItem.Item.Group = dropItem.DropZoneName;
    }

    protected override async Task OnInitializedAsync()
    {
        await ApplicationLoadingIndicatorService.Show();

        var httpClient = clientFactory.CreateClient("API");

        ProjectDTO? response = null;

        if (ProjectID.HasValue)
        {
            response = await httpClient.GetFromJsonAsync<ProjectDTO>($"/api/project/{ProjectID.Value}");
        }
        else
        {
            response = await httpClient.GetFromJsonAsync<ProjectDTO>("/api/project/default");
        }

        if (response == null)
        {
            await ToastService.Error("Failed to retrieve project data.");
            await ApplicationLoadingIndicatorService.Hide();
            navigationManager.NavigateTo("/");
            return;
        }

        ColumnModels = [];

        Items = [];
        TemplateID = response.Template.ID;
        response.Template.Columns.
        ForEach(c =>
            {
                if (c.Items.Count == 0)
                {
                    ColumnModels.Add(new ColumnModel { ID = c.ID, Name = c.Name, MarkAsDone = c.MarkAsDone });
                }
                else
                {
                    c.Items.ForEach(i =>
                    {
                        Items.Add(new DropItem(c, i));
                        ColumnModels.Add(new ColumnModel { ID = c.ID, Name = c.Name, MarkAsDone = c.MarkAsDone });
                    });

                }

            }
        );

        if(Items.Count == 0)
        {
            Items.Add(new DropItem(-1, string.Empty, string.Empty, string.Empty, null, []));
        }

        ProjectName = response.Name;

        Items.ForEach(i => Console.WriteLine($"ID: {i.ID}, Name: {i.Name}, Group: {i.Group}"));

        await ApplicationLoadingIndicatorService.Hide();

    }

    public Task ShowInfoModal(DropItem item)
    {
        return ModalService.Show<ItemDetailsComponent>(x => x.Add(x => x.Item, item), new ModalInstanceOptions(){UseModalStructure=false});
    }

    public async Task ShowEditModal(DropItem item)
    {
        try
        {
            await GetTags();
            await ModalService.Show<EditTaskComponent>(x =>
            {
                x.Add(x => x.Item, item);
                x.Add(x => x.OnConfirm, ChangedTask);
                x.Add(x => x.Tags, Tags);
            }, new ModalInstanceOptions() { UseModalStructure = false });
        }
        catch (HttpRequestException)
        {

        }
    }

    public Task ShowDeleteModal(DropItem item)
    {
        return ModalService.Show<DeleteTaskComponent>(
            x => { 
                x.Add(x => x.Item, item);
                x.Add(x => x.OnConfirm, DeletedTask);
            },
            new ModalInstanceOptions() { UseModalStructure = false });
    }

    public Task ShowAddColumnModal()
    {
        return ModalService.Show<AddColumnComponent>(x=>
        {
            x.Add(x => x.OnConfirm, ColumnAdded);
            x.Add(x => x.TemplateID, TemplateID);
        }, new ModalInstanceOptions() {UseModalStructure = false});
    }

    private async Task ColumnAdded(AddColumnResponse? response)
    {
        if(response == null)
        {
            await ToastService.Error("Error with processing request.");
            return;
        }

        if(!response.IsSuccess)
        {
            await ToastService.Error(response.Message);
            return;
        }

        ColumnModels.Add(new ColumnModel()
            {
                ID = response.AddedID,
                Name = response.Name,
                MarkAsDone = response.MarkAsDone
            });

        DropContainer.Refresh();
        StateHasChanged();
    }

    private async Task GetTags()
    {
        if (Tags == null)
        {
            try
            {
                var httpClient = clientFactory.CreateClient("API");

                var response = await httpClient.GetFromJsonAsync<List<TagDTO>>("/api/tag/");

                if (response == null)
                {
                    await ToastService.Error("Failed to retrieve task tag data.");
                    return;
                }

                Tags = response;
            }
            catch(HttpRequestException e)
            {
                await ToastService.Error("Failed to retrieve task tag data.");
                throw e;
            }

        }
    }

    public async Task ShowExtendedAddTask()
    {
        try
        {
            await GetTags();

            await ModalService.Show<AddNewTaskExtendedComponent>("Add new task", x =>
            {
                x.Add(x => x.Columns, ColumnModels);
                x.Add(x => x.ProjectID, ProjectID.HasValue? ProjectID.Value: 1);
                x.Add(x => x.OnConfirm, AddedTask);
                x.Add(x => x.Tags, Tags);
            });
        }
        catch(HttpRequestException)
        {

        }
    }

    public async Task ShowAddTask(int column, string columnName)
    {
        try
        {
            await GetTags();

            await ModalService.Show<AddNewTaskComponent>("Add new task", x =>
            {
                x.Add(x => x.OnConfirm, AddedTask);
                x.Add(x => x.ColumnID, column);
                x.Add(x => x.ProjectID, ProjectID.HasValue ? ProjectID.Value : 1);
                x.Add(x => x.ColumnName, columnName);
                x.Add(x => x.Tags, Tags);
            });
        }
        catch (HttpRequestException)
        {

        }
    
    }

    private async Task AddedTask(AddItemResponse? response, DropItem? added)
    {
        if(response == null || added == null)
        {
            await ToastService.Error("Error with processing request.");
            return;
        }
        if(!response.IsSuccess)
        {
            await ToastService.Error(response.Message);
            return;
        }

        Items.Add(added);
        await ToastService.Success(response.Message);
        DropContainer.Refresh();
        StateHasChanged();
    }

    private async Task ChangedTask(DefaultResponse? response, DropItem? changed)
    {
        if(response == null || changed == null)
        {
            await ToastService.Error("Error with processing request.");
            return;
        }

        if(!response.IsSuccess)
        {
            await ToastService.Error(response.Message);
            return;
        }

        var item = Items.Where(i => i.ID == changed.ID).First();
        item.Name = changed.Name;
        item.Description = changed.Description;
        await ToastService.Success(response.Message); 
        DropContainer.Refresh();
        StateHasChanged();

    }

    private async Task DeletedTask(DefaultResponse? response, int? itemID)
    {
        if (response == null || itemID == null)
        {
            await ToastService.Error("Error with processing request.");
            return;
        }
        if (!response.IsSuccess)
        {
            await ToastService.Error(response.Message);
            return;
        }

        Items.RemoveAll(i => i.ID == itemID);
        await ToastService.Success(response.Message);
        DropContainer.Refresh();
        StateHasChanged();
    }
}