@page "/template"
@inject IHttpClientFactory clientFactory
@inject ILoadingIndicatorService ApplicationLoadingIndicatorService
@inject IToastService ToastService
<PageTitle>Templates</PageTitle>

<Heading Size="HeadingSize.Is3" Margin="Margin.Is3.FromStart">Templates</Heading>

@if(templates != null)
{
    <CardDeck Margin="Margin.Is3.FromBottom">
        @foreach(var t in templates)
        {
            <Card>
                <CardBody>
                    <CardTitle Size="4">
                        Template: @t.Name
                    </CardTitle>
                    <Button Color="Color.Primary" Clicked="()=>ShowInfoTemplate(t.ID)"><Icon Name="IconName.InfoCircle"/></Button>
                    <Button Color="Color.Secondary" Clicked="()=>ShowEditTemplate(t.ID)"><Icon Name="IconName.Edit"/></Button>
                    <Button Color="Color.Danger" Clicked="()=>RemoveTemplate(t.ID)"><Icon Name="IconName.Delete"/></Button>
                </CardBody>
            </Card>
        }
    </CardDeck>
    <Button Color="Color.Success" Clicked="ShowAddTemplate">Add template</Button>
}

@code {
    [Inject] public IModalService ModalService { get; set; }
    private List<TemplateDTO> templates;

    protected override async Task OnInitializedAsync()
    {
        await ApplicationLoadingIndicatorService.Show();

        var httpClient = clientFactory.CreateClient("API");

        var response = await httpClient.GetFromJsonAsync<List<TemplateDTO>>("/api/template/");

        if(response != null)
        {
            templates = response;
        }
        else
        {
            await ToastService.Error("Templates ERROR");
        }

        await ApplicationLoadingIndicatorService.Hide();
    }

    public async Task ShowInfoTemplate(int ID)
    {
        var template = templates.Find(t => t.ID == ID);
        if(template == null)
        {
            await ToastService.Error("Unknown template to display.");
            return;
        }
        await ModalService.Show<InfoTemplateComponent>(x =>
        {
            x.Add(x => x.Columns, template.Columns.Select(c => c.Name).ToList());
            x.Add(x => x.Name, template.Name);
        }, new ModalInstanceOptions() { UseModalStructure = false });
    }

    public Task ShowAddTemplate()
    {
        return ModalService.Show<AddTemplateComponent>(x=>
        {
            x.Add(x => x.OnConfirm, TemaplateAdded);
        },new ModalInstanceOptions(){ UseModalStructure = false, Size=ModalSize.ExtraLarge });
    }

    public async Task TemaplateAdded(AddTemplateResponse? response)
    {
        if(response == null)
        {
            await ToastService.Error("Error with processing request.");
            return;
        }

        if(response.IsSuccess)
        {
            var httpClient = clientFactory.CreateClient("API");

            var templateResposne = await httpClient.GetFromJsonAsync<TemplateDTO>($"/api/template/{response.AddedID}");

            if (templateResposne == null)
            {
                await ToastService.Error("Error with retrieving new added template");
            }
            else
            {
                templates.Add(templateResposne);
                await ToastService.Success(response.Message);
            }

        }
        else
        {
            await ToastService.Error(response.Message);
        }

    }

    public async Task ShowEditTemplate(int ID)
    {
        var template = templates.Where(t => t.ID == ID).First();
        await ModalService.Show<EditTemplateComponent>(x =>
        {
            x.Add(x => x.OnConfirm, null);
            x.Add(x => x.TemplateName, template.Name);
            x.Add(x => x.Columns, template.Columns.Select(c => new EditColumnModel()
                {
                    ID = c.ID,
                    Name = c.Name
                }).ToList());
        }, new ModalInstanceOptions() { UseModalStructure = false, Size = ModalSize.ExtraLarge });
    }

    public async Task RemoveTemplate(int ID)
    {
        var httpClient = clientFactory.CreateClient("API");

        var response = await httpClient.DeleteFromJsonAsync<DefaultResponse>($"/api/template/{ID}");

        if (response == null)
        {
            await ToastService.Error("Error with processing request.");
            return;
        }

        if(response.IsSuccess)
        {
            await ToastService.Success(response.Message);
            templates.RemoveAll(t => t.ID == ID);
        }
        else
        {
            await ToastService.Error(response.Message);
        }
        
    }
}
